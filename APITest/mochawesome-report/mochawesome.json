{
  "stats": {
    "suites": 1,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2024-03-24T19:29:31.272Z",
    "end": "2024-03-24T19:29:31.421Z",
    "duration": 149,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "94b839f6-02b6-42c6-aee7-de6e1d2670dc",
      "title": "",
      "fullFile": "D:\\TestingTask2\\server.test.js",
      "file": "\\server.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "31116184-3af9-4110-9cdf-1217fa62db90",
          "title": "Testing Routes",
          "fullFile": "D:\\TestingTask2\\server.test.js",
          "file": "\\server.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should delete all users",
              "fullTitle": "Testing Routes should delete all users",
              "timedOut": false,
              "duration": 60,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key=\"keyadmin123\";\n const response = await request (url)\n          .delete ('/api/v1/all-users')\n          .send ({\n            key_admin : key\n        })\n        expect(response.status).equal(200)\n        expect(response.body).to.have.property('message', 'Users deleted with success');",
              "err": {},
              "uuid": "8b4a1c0f-86cb-4560-8cb8-09ae194b59a8",
              "parentUUID": "31116184-3af9-4110-9cdf-1217fa62db90",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not delete all users as wrong adminkey",
              "fullTitle": "Testing Routes should not delete all users as wrong adminkey",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key=\"wrongkey\";\n const response = await request (url)\n          .delete ('/api/v1/all-users')\n          .send ({\n            key_admin : key\n        })\n        expect(response.status).equal(403)\n        expect(response.body).to.have.property('message', 'Unauthorized access');",
              "err": {},
              "uuid": "8e123184-6859-4b47-b869-3b593bf1d26e",
              "parentUUID": "31116184-3af9-4110-9cdf-1217fa62db90",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create new user and return message ",
              "fullTitle": "Testing Routes should create new user and return message ",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(url)\n          .post ('/api/v1/users')\n          .send (enrtyData)\n        expect(response.body).to.have.property('message', 'User registered with success'); \n        expect(response.status).equal(200)",
              "err": {},
              "uuid": "172bb993-c700-401e-834e-f6fd4fe3ac79",
              "parentUUID": "31116184-3af9-4110-9cdf-1217fa62db90",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create new user and return message ",
              "fullTitle": "Testing Routes should not create new user and return message ",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(url)\n          .post ('/api/v1/users')\n          .send (enrtyData)\n        expect(response.body).to.have.property('message', 'User already registered'); \n        expect(response.status).equal(401)",
              "err": {},
              "uuid": "a23469a4-ff37-48fc-b472-bb418e412d57",
              "parentUUID": "31116184-3af9-4110-9cdf-1217fa62db90",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should authenticate user",
              "fullTitle": "Testing Routes should authenticate user",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(url)\n          .post ('/api/v1/auth')\n          .send (\n            \n            emailAndPass\n        )\n       expect(response.status).equal(200)\n        expect(response.body).to.have.property('token');",
              "err": {},
              "uuid": "f5b4a211-2f25-462b-93fe-a9ab0b130952",
              "parentUUID": "31116184-3af9-4110-9cdf-1217fa62db90",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not authenticate user as wrong email or password",
              "fullTitle": "Testing Routes should not authenticate user as wrong email or password",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(url)\n          .post ('/api/v1/auth')\n          .send (\n            \n            wrongEmailAndPass\n        )\n        \n       expect(response.status).equal(401)\n       expect(response.body).to.have.property('message', 'Incorrect email or password');",
              "err": {},
              "uuid": "c3a8a68a-ed1e-4650-822c-0a4c14781494",
              "parentUUID": "31116184-3af9-4110-9cdf-1217fa62db90",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get user by token",
              "fullTitle": "Testing Routes should get user by token",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const token = await getToken(\n         \n        emailAndPass\n     )\n    \n     const response = await request(url)\n     .get(\"/api/v1/users\")\n     .set('Authorization', token);\n  expect(response.status).equal(200);\n    expect(response.body).to.have.property(\"id\");\n   expect(response.body).to.have.property(\"name\");\n   expect(response.body).to.have.property(\"email\");\n   expect(response.body).to.have.property(\"imageUrl\");",
              "err": {},
              "uuid": "7a231455-2ca4-4d05-9e83-70a50fada771",
              "parentUUID": "31116184-3af9-4110-9cdf-1217fa62db90",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not get user by adding wrong token",
              "fullTitle": "Testing Routes should not get user by adding wrong token",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const token = \"qq\";\n     const response = await request(url)\n     .get(\"/api/v1/users\")\n     .set('Authorization', token);\n  expect(response.status).equal(403);\n    expect(response.body).to.have.property('message', 'Unauthorized');",
              "err": {},
              "uuid": "fb5e84c4-b190-4135-bb46-c174cb286f53",
              "parentUUID": "31116184-3af9-4110-9cdf-1217fa62db90",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should patch user data by token",
              "fullTitle": "Testing Routes should patch user data by token",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const token = await getToken(\n             emailAndPass\n         )\n    \n        \n         const response = await request(url)\n         .patch(\"/api/v1/users\")\n         .set('Authorization', token)\n         .send({\n             updatedData\n         });\n      expect(response.status).equal(200);\n      expect(response.body).to.have.property('message', 'User updated with success!');",
              "err": {},
              "uuid": "99fb27df-be36-41db-bdfd-de7acbc18461",
              "parentUUID": "31116184-3af9-4110-9cdf-1217fa62db90",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete user data by token",
              "fullTitle": "Testing Routes should delete user data by token",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const token = await getToken(\n             emailAndPass\n         )\n         const response = await request(url)\n         .delete(\"/api/v1/users\")\n         .set('Authorization', token)\n      expect(response.status).equal(200);\n      expect(response.body).to.have.property('message', 'User deleted with success!');",
              "err": {},
              "uuid": "9a874921-6434-44bc-81d8-334dfd6026cc",
              "parentUUID": "31116184-3af9-4110-9cdf-1217fa62db90",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8b4a1c0f-86cb-4560-8cb8-09ae194b59a8",
            "8e123184-6859-4b47-b869-3b593bf1d26e",
            "172bb993-c700-401e-834e-f6fd4fe3ac79",
            "a23469a4-ff37-48fc-b472-bb418e412d57",
            "f5b4a211-2f25-462b-93fe-a9ab0b130952",
            "c3a8a68a-ed1e-4650-822c-0a4c14781494",
            "7a231455-2ca4-4d05-9e83-70a50fada771",
            "fb5e84c4-b190-4135-bb46-c174cb286f53",
            "99fb27df-be36-41db-bdfd-de7acbc18461",
            "9a874921-6434-44bc-81d8-334dfd6026cc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 130,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.3.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}